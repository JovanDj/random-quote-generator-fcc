{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","fetchQuote","setState","loading","fetch","then","res","json","Math","floor","random","result","quote","text","quoteText","author","quoteAuthor","state","error","undefined","id","className","this","onClick","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAoFeA,G,kBAhFb,aAAe,IAAD,8BACZ,+CAoDFC,WAAa,WACX,EAAKC,SAAS,CACZC,SAAS,IAGXC,MACE,qFAECC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIA,EAAIE,KAAKC,MAAsB,IAAhBD,KAAKE,cAChCL,MACC,SAAAM,GACE,EAAKT,SAAS,CACZU,MAAO,CACLC,KAAMF,EAAOG,UACbC,OAAQJ,EAAOK,aAEjBb,SAAS,QAnEjB,EAAKc,MAAQ,CACXC,WAAOC,EACPhB,SAAS,EACTS,MAAO,CACLG,OAAQ,SACRF,KAAM,SARE,E,sEAaZ,OACE,yBAAKO,GAAG,aACN,yBAAKC,UAAU,aACb,sDAECC,KAAKL,MAAMd,SAAW,4CACtBmB,KAAKL,MAAMC,OACV,uBAAGG,UAAU,eAAeC,KAAKL,MAAMC,OAGzC,yBAAKG,UAAU,aAAaD,GAAG,QAC5BE,KAAKL,MAAML,MAAMC,MAEpB,yBAAKQ,UAAU,eAAeD,GAAG,UAC9BE,KAAKL,MAAML,MAAMG,QAEpB,4BAAQK,GAAG,YAAYG,QAASD,KAAKrB,YAArC,aAIA,uBACEuB,KACE,yCACAF,KAAKL,MAAML,MAAMC,KACjB,MACAS,KAAKL,MAAML,MAAMG,OAEnBK,GAAG,eAPL,a,0CAiBNE,KAAKrB,iB,GAnDSwB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.e5ff7094.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      error: undefined,\n      loading: false,\n      quote: {\n        author: \"Author\",\n        text: \"Text\"\n      }\n    };\n  }\n  render() {\n    return (\n      <div id=\"quote-box\">\n        <div className=\"container\">\n          <h1>Random Quote generator</h1>\n\n          {this.state.loading && <p>Please wait..</p>}\n          {this.state.error && (\n            <p className=\"text-danger\">{this.state.error}</p>\n          )}\n\n          <div className=\"quote-text\" id=\"text\">\n            {this.state.quote.text}\n          </div>\n          <div className=\"quote-author\" id=\"author\">\n            {this.state.quote.author}\n          </div>\n          <button id=\"new-quote\" onClick={this.fetchQuote}>\n            New Quote\n          </button>\n\n          <a\n            href={\n              \"https://twitter.com/intent/tweet?text=\" +\n              this.state.quote.text +\n              \" - \" +\n              this.state.quote.author\n            }\n            id=\"tweet-quote\"\n          >\n            Click\n          </a>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.fetchQuote();\n  }\n\n  fetchQuote = () => {\n    this.setState({\n      loading: true\n    });\n\n    fetch(\n      \"https://raw.githubusercontent.com/JamesFT/Database-Quotes-JSON/master/quotes.json\"\n    )\n      .then(res => res.json())\n      .then(res => res[Math.floor(Math.random() * 500)])\n      .then(\n        result => {\n          this.setState({\n            quote: {\n              text: result.quoteText,\n              author: result.quoteAuthor\n            },\n            loading: false\n          });\n        }\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n      );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./custom.scss\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}